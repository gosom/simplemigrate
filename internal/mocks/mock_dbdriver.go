// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gosom/simplemigrate (interfaces: DBDriver)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_dbdriver.go -package=mocks . DBDriver
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	simplemigrate "github.com/gosom/simplemigrate"
	gomock "go.uber.org/mock/gomock"
)

// MockDBDriver is a mock of DBDriver interface.
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver.
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance.
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// ApplyMigrations mocks base method.
func (m *MockDBDriver) ApplyMigrations(arg0 context.Context, arg1 string, arg2 bool, arg3 []simplemigrate.Migration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMigrations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyMigrations indicates an expected call of ApplyMigrations.
func (mr *MockDBDriverMockRecorder) ApplyMigrations(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMigrations", reflect.TypeOf((*MockDBDriver)(nil).ApplyMigrations), arg0, arg1, arg2, arg3)
}

// Close mocks base method.
func (m *MockDBDriver) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBDriverMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBDriver)(nil).Close), arg0)
}

// CreateMigrationsTable mocks base method.
func (m *MockDBDriver) CreateMigrationsTable(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigrationsTable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMigrationsTable indicates an expected call of CreateMigrationsTable.
func (mr *MockDBDriverMockRecorder) CreateMigrationsTable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationsTable", reflect.TypeOf((*MockDBDriver)(nil).CreateMigrationsTable), arg0, arg1)
}

// Dialect mocks base method.
func (m *MockDBDriver) Dialect() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dialect indicates an expected call of Dialect.
func (mr *MockDBDriverMockRecorder) Dialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockDBDriver)(nil).Dialect))
}

// SelectMigrations mocks base method.
func (m *MockDBDriver) SelectMigrations(arg0 context.Context, arg1 string) ([]simplemigrate.Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMigrations", arg0, arg1)
	ret0, _ := ret[0].([]simplemigrate.Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMigrations indicates an expected call of SelectMigrations.
func (mr *MockDBDriverMockRecorder) SelectMigrations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMigrations", reflect.TypeOf((*MockDBDriver)(nil).SelectMigrations), arg0, arg1)
}
