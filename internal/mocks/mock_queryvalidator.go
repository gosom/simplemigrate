// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gosom/simplemigrate (interfaces: QueryValidator)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_queryvalidator.go -package=mocks . QueryValidator
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQueryValidator is a mock of QueryValidator interface.
type MockQueryValidator struct {
	ctrl     *gomock.Controller
	recorder *MockQueryValidatorMockRecorder
}

// MockQueryValidatorMockRecorder is the mock recorder for MockQueryValidator.
type MockQueryValidatorMockRecorder struct {
	mock *MockQueryValidator
}

// NewMockQueryValidator creates a new mock instance.
func NewMockQueryValidator(ctrl *gomock.Controller) *MockQueryValidator {
	mock := &MockQueryValidator{ctrl: ctrl}
	mock.recorder = &MockQueryValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryValidator) EXPECT() *MockQueryValidatorMockRecorder {
	return m.recorder
}

// ValidateQuery mocks base method.
func (m *MockQueryValidator) ValidateQuery(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateQuery indicates an expected call of ValidateQuery.
func (mr *MockQueryValidatorMockRecorder) ValidateQuery(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateQuery", reflect.TypeOf((*MockQueryValidator)(nil).ValidateQuery), arg0, arg1, arg2)
}
